-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_PRT_pred\hdlsrc\LSTM_cell\forget_gate.vhd
-- Created: 2024-05-08 02:20:48
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: forget_gate
-- Source Path: LSTM_cell/LSTM_predictor/LSTM_layers/lstm_cell_subsystem/forget_gate
-- Hierarchy Level: 3
-- Model version: 5.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.LSTM_predictor_pkg.ALL;

ENTITY forget_gate IS
  PORT( In1                               :   IN    vector_of_std_logic_vector16(0 TO 10);  -- sfix16_En15 [11]
        Out1                              :   OUT   vector_of_std_logic_vector16(0 TO 9)  -- sfix16_En15 [10]
        );
END forget_gate;


ARCHITECTURE rtl OF forget_gate IS

  -- Component Declarations
  COMPONENT sig
    PORT( In1                             :   IN    vector_of_std_logic_vector16(0 TO 9);  -- sfix16_En15 [10]
          Out1                            :   OUT   vector_of_std_logic_vector16(0 TO 9)  -- sfix16_En15 [10]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : sig
    USE ENTITY work.sig(rtl);

  -- Signals
  SIGNAL In1_signed                       : vector_of_std_logic_vector16(0 TO 10);  -- ufix16 [11]
  SIGNAL c6_w_f_out1                      : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL w_f_out1                         : matrix_of_signed16(0 TO 9, 0 TO 10);  -- sfix16_En15 [10x11]
  SIGNAL s                                : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL selector_out                     : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL s_1                              : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL selector_out_1                   : vector_of_std_logic_vector16(0 TO 109);  -- ufix16 [110]
  SIGNAL selector_out_2                   : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL s_2                              : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL MMul_dot_product_mul_temp        : vector_of_signed32(0 TO 109);  -- sfix32_En30 [110]
  SIGNAL MMul_dot_product_out             : vector_of_signed16(0 TO 109);  -- sfix16_En15 [110]
  SIGNAL reshape_out                      : matrix_of_signed16(0 TO 10, 0 TO 9);  -- sfix16_En15 [11x10]
  SIGNAL selector_out_3                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_4                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_01_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_5                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_12_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_6                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_23_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_7                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_34_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_8                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_45_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_9                   : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_56_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_10                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_67_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_11                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_78_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_12                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL MMul_add_89_out                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL selector_out_13                  : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL s_3                              : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL Matrix_Multiply_out1             : vector_of_signed16(0 TO 9);  -- sfix16_En15 [10]
  SIGNAL Matrix_Multiply_out1_1           : vector_of_std_logic_vector16(0 TO 9);  -- ufix16 [10]
  SIGNAL sig_out1                         : vector_of_std_logic_vector16(0 TO 9);  -- ufix16 [10]

BEGIN
  u_sig : sig
    PORT MAP( In1 => Matrix_Multiply_out1_1,  -- sfix16_En15 [10]
              Out1 => sig_out1  -- sfix16_En15 [10]
              );

  In1_signed <= In1;

  c6_w_f_out1(0) <= to_signed(16#0801#, 16);
  c6_w_f_out1(1) <= to_signed(-16#0D54#, 16);
  c6_w_f_out1(2) <= to_signed(-16#04EC#, 16);
  c6_w_f_out1(3) <= to_signed(16#0245#, 16);
  c6_w_f_out1(4) <= to_signed(16#33B8#, 16);
  c6_w_f_out1(5) <= to_signed(16#19D2#, 16);
  c6_w_f_out1(6) <= to_signed(16#2FF2#, 16);
  c6_w_f_out1(7) <= to_signed(16#0DFA#, 16);
  c6_w_f_out1(8) <= to_signed(16#3ED0#, 16);
  c6_w_f_out1(9) <= to_signed(16#283F#, 16);
  c6_w_f_out1(10) <= to_signed(-16#2C56#, 16);
  c6_w_f_out1(11) <= to_signed(-16#2DD3#, 16);
  c6_w_f_out1(12) <= to_signed(-16#05BA#, 16);
  c6_w_f_out1(13) <= to_signed(16#0D24#, 16);
  c6_w_f_out1(14) <= to_signed(16#05A1#, 16);
  c6_w_f_out1(15) <= to_signed(16#1136#, 16);
  c6_w_f_out1(16) <= to_signed(16#258F#, 16);
  c6_w_f_out1(17) <= to_signed(-16#2CAB#, 16);
  c6_w_f_out1(18) <= to_signed(-16#1695#, 16);
  c6_w_f_out1(19) <= to_signed(16#00B2#, 16);
  c6_w_f_out1(20) <= to_signed(-16#1626#, 16);
  c6_w_f_out1(21) <= to_signed(16#153B#, 16);
  c6_w_f_out1(22) <= to_signed(16#0ABD#, 16);
  c6_w_f_out1(23) <= to_signed(16#113C#, 16);
  c6_w_f_out1(24) <= to_signed(16#2204#, 16);
  c6_w_f_out1(25) <= to_signed(-16#0425#, 16);
  c6_w_f_out1(26) <= to_signed(16#2008#, 16);
  c6_w_f_out1(27) <= to_signed(-16#27E7#, 16);
  c6_w_f_out1(28) <= to_signed(16#000D#, 16);
  c6_w_f_out1(29) <= to_signed(16#3C7E#, 16);
  c6_w_f_out1(30) <= to_signed(16#0B28#, 16);
  c6_w_f_out1(31) <= to_signed(-16#126E#, 16);
  c6_w_f_out1(32) <= to_signed(16#193A#, 16);
  c6_w_f_out1(33) <= to_signed(16#0F10#, 16);
  c6_w_f_out1(34) <= to_signed(16#0C2C#, 16);
  c6_w_f_out1(35) <= to_signed(-16#1304#, 16);
  c6_w_f_out1(36) <= to_signed(-16#088F#, 16);
  c6_w_f_out1(37) <= to_signed(16#1F53#, 16);
  c6_w_f_out1(38) <= to_signed(-16#071E#, 16);
  c6_w_f_out1(39) <= to_signed(-16#282C#, 16);
  c6_w_f_out1(40) <= to_signed(-16#2608#, 16);
  c6_w_f_out1(41) <= to_signed(16#17D7#, 16);
  c6_w_f_out1(42) <= to_signed(16#2AF3#, 16);
  c6_w_f_out1(43) <= to_signed(-16#3200#, 16);
  c6_w_f_out1(44) <= to_signed(16#0982#, 16);
  c6_w_f_out1(45) <= to_signed(16#265D#, 16);
  c6_w_f_out1(46) <= to_signed(-16#02AB#, 16);
  c6_w_f_out1(47) <= to_signed(-16#270D#, 16);
  c6_w_f_out1(48) <= to_signed(-16#1B0F#, 16);
  c6_w_f_out1(49) <= to_signed(16#0317#, 16);
  c6_w_f_out1(50) <= to_signed(-16#1177#, 16);
  c6_w_f_out1(51) <= to_signed(-16#053D#, 16);
  c6_w_f_out1(52) <= to_signed(-16#0249#, 16);
  c6_w_f_out1(53) <= to_signed(16#1843#, 16);
  c6_w_f_out1(54) <= to_signed(-16#1239#, 16);
  c6_w_f_out1(55) <= to_signed(-16#1A79#, 16);
  c6_w_f_out1(56) <= to_signed(16#0A1E#, 16);
  c6_w_f_out1(57) <= to_signed(16#1F06#, 16);
  c6_w_f_out1(58) <= to_signed(-16#2D99#, 16);
  c6_w_f_out1(59) <= to_signed(-16#3A58#, 16);
  c6_w_f_out1(60) <= to_signed(-16#0028#, 16);
  c6_w_f_out1(61) <= to_signed(16#2008#, 16);
  c6_w_f_out1(62) <= to_signed(-16#0430#, 16);
  c6_w_f_out1(63) <= to_signed(-16#188C#, 16);
  c6_w_f_out1(64) <= to_signed(-16#0AAB#, 16);
  c6_w_f_out1(65) <= to_signed(-16#0F12#, 16);
  c6_w_f_out1(66) <= to_signed(-16#1F6D#, 16);
  c6_w_f_out1(67) <= to_signed(16#037A#, 16);
  c6_w_f_out1(68) <= to_signed(-16#008D#, 16);
  c6_w_f_out1(69) <= to_signed(-16#217B#, 16);
  c6_w_f_out1(70) <= to_signed(16#09DA#, 16);
  c6_w_f_out1(71) <= to_signed(-16#1C4F#, 16);
  c6_w_f_out1(72) <= to_signed(16#0737#, 16);
  c6_w_f_out1(73) <= to_signed(-16#17D7#, 16);
  c6_w_f_out1(74) <= to_signed(16#0BAC#, 16);
  c6_w_f_out1(75) <= to_signed(16#1192#, 16);
  c6_w_f_out1(76) <= to_signed(16#2B29#, 16);
  c6_w_f_out1(77) <= to_signed(-16#0ABA#, 16);
  c6_w_f_out1(78) <= to_signed(-16#301F#, 16);
  c6_w_f_out1(79) <= to_signed(-16#0C56#, 16);
  c6_w_f_out1(80) <= to_signed(-16#242E#, 16);
  c6_w_f_out1(81) <= to_signed(16#3338#, 16);
  c6_w_f_out1(82) <= to_signed(-16#0835#, 16);
  c6_w_f_out1(83) <= to_signed(16#214D#, 16);
  c6_w_f_out1(84) <= to_signed(16#1CE6#, 16);
  c6_w_f_out1(85) <= to_signed(16#0F88#, 16);
  c6_w_f_out1(86) <= to_signed(16#117F#, 16);
  c6_w_f_out1(87) <= to_signed(16#3498#, 16);
  c6_w_f_out1(88) <= to_signed(-16#0864#, 16);
  c6_w_f_out1(89) <= to_signed(-16#2C37#, 16);
  c6_w_f_out1(90) <= to_signed(16#2ED2#, 16);
  c6_w_f_out1(91) <= to_signed(16#2849#, 16);
  c6_w_f_out1(92) <= to_signed(-16#2443#, 16);
  c6_w_f_out1(93) <= to_signed(-16#133D#, 16);
  c6_w_f_out1(94) <= to_signed(-16#17C9#, 16);
  c6_w_f_out1(95) <= to_signed(-16#28BD#, 16);
  c6_w_f_out1(96) <= to_signed(16#0831#, 16);
  c6_w_f_out1(97) <= to_signed(16#1F01#, 16);
  c6_w_f_out1(98) <= to_signed(16#2C84#, 16);
  c6_w_f_out1(99) <= to_signed(-16#2C79#, 16);
  c6_w_f_out1(100) <= to_signed(-16#1377#, 16);
  c6_w_f_out1(101) <= to_signed(-16#119B#, 16);
  c6_w_f_out1(102) <= to_signed(16#09AB#, 16);
  c6_w_f_out1(103) <= to_signed(16#2B85#, 16);
  c6_w_f_out1(104) <= to_signed(16#2698#, 16);
  c6_w_f_out1(105) <= to_signed(16#1117#, 16);
  c6_w_f_out1(106) <= to_signed(-16#1560#, 16);
  c6_w_f_out1(107) <= to_signed(16#2517#, 16);
  c6_w_f_out1(108) <= to_signed(-16#01C9#, 16);
  c6_w_f_out1(109) <= to_signed(-16#140F#, 16);

  w_f_out1_gen1: FOR d1 IN 0 TO 10 GENERATE
    w_f_out1_gen: FOR d0 IN 0 TO 9 GENERATE
      w_f_out1(d0, d1) <= c6_w_f_out1(d0 + (d1 * 10));
    END GENERATE;
  END GENERATE;

  s_gen1: FOR d1 IN 0 TO 10 GENERATE
    s_gen: FOR d0 IN 0 TO 9 GENERATE
      s(d0 + (d1 * 10)) <= w_f_out1(d0, d1);
    END GENERATE;
  END GENERATE;

  selector_out(0) <= s(0);
  selector_out(1) <= s(10);
  selector_out(2) <= s(20);
  selector_out(3) <= s(30);
  selector_out(4) <= s(40);
  selector_out(5) <= s(50);
  selector_out(6) <= s(60);
  selector_out(7) <= s(70);
  selector_out(8) <= s(80);
  selector_out(9) <= s(90);
  selector_out(10) <= s(100);
  selector_out(11) <= s(1);
  selector_out(12) <= s(11);
  selector_out(13) <= s(21);
  selector_out(14) <= s(31);
  selector_out(15) <= s(41);
  selector_out(16) <= s(51);
  selector_out(17) <= s(61);
  selector_out(18) <= s(71);
  selector_out(19) <= s(81);
  selector_out(20) <= s(91);
  selector_out(21) <= s(101);
  selector_out(22) <= s(2);
  selector_out(23) <= s(12);
  selector_out(24) <= s(22);
  selector_out(25) <= s(32);
  selector_out(26) <= s(42);
  selector_out(27) <= s(52);
  selector_out(28) <= s(62);
  selector_out(29) <= s(72);
  selector_out(30) <= s(82);
  selector_out(31) <= s(92);
  selector_out(32) <= s(102);
  selector_out(33) <= s(3);
  selector_out(34) <= s(13);
  selector_out(35) <= s(23);
  selector_out(36) <= s(33);
  selector_out(37) <= s(43);
  selector_out(38) <= s(53);
  selector_out(39) <= s(63);
  selector_out(40) <= s(73);
  selector_out(41) <= s(83);
  selector_out(42) <= s(93);
  selector_out(43) <= s(103);
  selector_out(44) <= s(4);
  selector_out(45) <= s(14);
  selector_out(46) <= s(24);
  selector_out(47) <= s(34);
  selector_out(48) <= s(44);
  selector_out(49) <= s(54);
  selector_out(50) <= s(64);
  selector_out(51) <= s(74);
  selector_out(52) <= s(84);
  selector_out(53) <= s(94);
  selector_out(54) <= s(104);
  selector_out(55) <= s(5);
  selector_out(56) <= s(15);
  selector_out(57) <= s(25);
  selector_out(58) <= s(35);
  selector_out(59) <= s(45);
  selector_out(60) <= s(55);
  selector_out(61) <= s(65);
  selector_out(62) <= s(75);
  selector_out(63) <= s(85);
  selector_out(64) <= s(95);
  selector_out(65) <= s(105);
  selector_out(66) <= s(6);
  selector_out(67) <= s(16);
  selector_out(68) <= s(26);
  selector_out(69) <= s(36);
  selector_out(70) <= s(46);
  selector_out(71) <= s(56);
  selector_out(72) <= s(66);
  selector_out(73) <= s(76);
  selector_out(74) <= s(86);
  selector_out(75) <= s(96);
  selector_out(76) <= s(106);
  selector_out(77) <= s(7);
  selector_out(78) <= s(17);
  selector_out(79) <= s(27);
  selector_out(80) <= s(37);
  selector_out(81) <= s(47);
  selector_out(82) <= s(57);
  selector_out(83) <= s(67);
  selector_out(84) <= s(77);
  selector_out(85) <= s(87);
  selector_out(86) <= s(97);
  selector_out(87) <= s(107);
  selector_out(88) <= s(8);
  selector_out(89) <= s(18);
  selector_out(90) <= s(28);
  selector_out(91) <= s(38);
  selector_out(92) <= s(48);
  selector_out(93) <= s(58);
  selector_out(94) <= s(68);
  selector_out(95) <= s(78);
  selector_out(96) <= s(88);
  selector_out(97) <= s(98);
  selector_out(98) <= s(108);
  selector_out(99) <= s(9);
  selector_out(100) <= s(19);
  selector_out(101) <= s(29);
  selector_out(102) <= s(39);
  selector_out(103) <= s(49);
  selector_out(104) <= s(59);
  selector_out(105) <= s(69);
  selector_out(106) <= s(79);
  selector_out(107) <= s(89);
  selector_out(108) <= s(99);
  selector_out(109) <= s(109);

  s_1_gen: FOR d0 IN 0 TO 109 GENERATE
    s_1(d0) <= selector_out(d0);
  END GENERATE;

  selector_out_1(0) <= In1_signed(0);
  selector_out_1(1) <= In1_signed(1);
  selector_out_1(2) <= In1_signed(2);
  selector_out_1(3) <= In1_signed(3);
  selector_out_1(4) <= In1_signed(4);
  selector_out_1(5) <= In1_signed(5);
  selector_out_1(6) <= In1_signed(6);
  selector_out_1(7) <= In1_signed(7);
  selector_out_1(8) <= In1_signed(8);
  selector_out_1(9) <= In1_signed(9);
  selector_out_1(10) <= In1_signed(10);
  selector_out_1(11) <= In1_signed(0);
  selector_out_1(12) <= In1_signed(1);
  selector_out_1(13) <= In1_signed(2);
  selector_out_1(14) <= In1_signed(3);
  selector_out_1(15) <= In1_signed(4);
  selector_out_1(16) <= In1_signed(5);
  selector_out_1(17) <= In1_signed(6);
  selector_out_1(18) <= In1_signed(7);
  selector_out_1(19) <= In1_signed(8);
  selector_out_1(20) <= In1_signed(9);
  selector_out_1(21) <= In1_signed(10);
  selector_out_1(22) <= In1_signed(0);
  selector_out_1(23) <= In1_signed(1);
  selector_out_1(24) <= In1_signed(2);
  selector_out_1(25) <= In1_signed(3);
  selector_out_1(26) <= In1_signed(4);
  selector_out_1(27) <= In1_signed(5);
  selector_out_1(28) <= In1_signed(6);
  selector_out_1(29) <= In1_signed(7);
  selector_out_1(30) <= In1_signed(8);
  selector_out_1(31) <= In1_signed(9);
  selector_out_1(32) <= In1_signed(10);
  selector_out_1(33) <= In1_signed(0);
  selector_out_1(34) <= In1_signed(1);
  selector_out_1(35) <= In1_signed(2);
  selector_out_1(36) <= In1_signed(3);
  selector_out_1(37) <= In1_signed(4);
  selector_out_1(38) <= In1_signed(5);
  selector_out_1(39) <= In1_signed(6);
  selector_out_1(40) <= In1_signed(7);
  selector_out_1(41) <= In1_signed(8);
  selector_out_1(42) <= In1_signed(9);
  selector_out_1(43) <= In1_signed(10);
  selector_out_1(44) <= In1_signed(0);
  selector_out_1(45) <= In1_signed(1);
  selector_out_1(46) <= In1_signed(2);
  selector_out_1(47) <= In1_signed(3);
  selector_out_1(48) <= In1_signed(4);
  selector_out_1(49) <= In1_signed(5);
  selector_out_1(50) <= In1_signed(6);
  selector_out_1(51) <= In1_signed(7);
  selector_out_1(52) <= In1_signed(8);
  selector_out_1(53) <= In1_signed(9);
  selector_out_1(54) <= In1_signed(10);
  selector_out_1(55) <= In1_signed(0);
  selector_out_1(56) <= In1_signed(1);
  selector_out_1(57) <= In1_signed(2);
  selector_out_1(58) <= In1_signed(3);
  selector_out_1(59) <= In1_signed(4);
  selector_out_1(60) <= In1_signed(5);
  selector_out_1(61) <= In1_signed(6);
  selector_out_1(62) <= In1_signed(7);
  selector_out_1(63) <= In1_signed(8);
  selector_out_1(64) <= In1_signed(9);
  selector_out_1(65) <= In1_signed(10);
  selector_out_1(66) <= In1_signed(0);
  selector_out_1(67) <= In1_signed(1);
  selector_out_1(68) <= In1_signed(2);
  selector_out_1(69) <= In1_signed(3);
  selector_out_1(70) <= In1_signed(4);
  selector_out_1(71) <= In1_signed(5);
  selector_out_1(72) <= In1_signed(6);
  selector_out_1(73) <= In1_signed(7);
  selector_out_1(74) <= In1_signed(8);
  selector_out_1(75) <= In1_signed(9);
  selector_out_1(76) <= In1_signed(10);
  selector_out_1(77) <= In1_signed(0);
  selector_out_1(78) <= In1_signed(1);
  selector_out_1(79) <= In1_signed(2);
  selector_out_1(80) <= In1_signed(3);
  selector_out_1(81) <= In1_signed(4);
  selector_out_1(82) <= In1_signed(5);
  selector_out_1(83) <= In1_signed(6);
  selector_out_1(84) <= In1_signed(7);
  selector_out_1(85) <= In1_signed(8);
  selector_out_1(86) <= In1_signed(9);
  selector_out_1(87) <= In1_signed(10);
  selector_out_1(88) <= In1_signed(0);
  selector_out_1(89) <= In1_signed(1);
  selector_out_1(90) <= In1_signed(2);
  selector_out_1(91) <= In1_signed(3);
  selector_out_1(92) <= In1_signed(4);
  selector_out_1(93) <= In1_signed(5);
  selector_out_1(94) <= In1_signed(6);
  selector_out_1(95) <= In1_signed(7);
  selector_out_1(96) <= In1_signed(8);
  selector_out_1(97) <= In1_signed(9);
  selector_out_1(98) <= In1_signed(10);
  selector_out_1(99) <= In1_signed(0);
  selector_out_1(100) <= In1_signed(1);
  selector_out_1(101) <= In1_signed(2);
  selector_out_1(102) <= In1_signed(3);
  selector_out_1(103) <= In1_signed(4);
  selector_out_1(104) <= In1_signed(5);
  selector_out_1(105) <= In1_signed(6);
  selector_out_1(106) <= In1_signed(7);
  selector_out_1(107) <= In1_signed(8);
  selector_out_1(108) <= In1_signed(9);
  selector_out_1(109) <= In1_signed(10);

  outputgen1: FOR k IN 0 TO 109 GENERATE
    selector_out_2(k) <= signed(selector_out_1(k));
  END GENERATE;

  s_2_gen: FOR d0 IN 0 TO 109 GENERATE
    s_2(d0) <= selector_out_2(d0);
  END GENERATE;


  MMul_dot_product_out_gen: FOR t_0 IN 0 TO 109 GENERATE
    MMul_dot_product_mul_temp(t_0) <= s_1(t_0) * s_2(t_0);
    MMul_dot_product_out(t_0) <= MMul_dot_product_mul_temp(t_0)(30 DOWNTO 15);
  END GENERATE MMul_dot_product_out_gen;


  reshape_out_gen1: FOR d1 IN 0 TO 9 GENERATE
    reshape_out_gen: FOR d0 IN 0 TO 10 GENERATE
      reshape_out(d0, d1) <= MMul_dot_product_out(d0 + (d1 * 11));
    END GENERATE;
  END GENERATE;


  selector_out_3_gen: FOR t_01 IN 0 TO 9 GENERATE
    selector_out_3(t_01) <= reshape_out(0, t_01);
  END GENERATE selector_out_3_gen;



  selector_out_4_gen: FOR t_02 IN 0 TO 9 GENERATE
    selector_out_4(t_02) <= reshape_out(1, t_02);
  END GENERATE selector_out_4_gen;



  MMul_add_01_out_gen: FOR t_03 IN 0 TO 9 GENERATE
    MMul_add_01_out(t_03) <= selector_out_3(t_03) + selector_out_4(t_03);
  END GENERATE MMul_add_01_out_gen;



  selector_out_5_gen: FOR t_04 IN 0 TO 9 GENERATE
    selector_out_5(t_04) <= reshape_out(2, t_04);
  END GENERATE selector_out_5_gen;



  MMul_add_12_out_gen: FOR t_05 IN 0 TO 9 GENERATE
    MMul_add_12_out(t_05) <= MMul_add_01_out(t_05) + selector_out_5(t_05);
  END GENERATE MMul_add_12_out_gen;



  selector_out_6_gen: FOR t_06 IN 0 TO 9 GENERATE
    selector_out_6(t_06) <= reshape_out(3, t_06);
  END GENERATE selector_out_6_gen;



  MMul_add_23_out_gen: FOR t_07 IN 0 TO 9 GENERATE
    MMul_add_23_out(t_07) <= MMul_add_12_out(t_07) + selector_out_6(t_07);
  END GENERATE MMul_add_23_out_gen;



  selector_out_7_gen: FOR t_08 IN 0 TO 9 GENERATE
    selector_out_7(t_08) <= reshape_out(4, t_08);
  END GENERATE selector_out_7_gen;



  MMul_add_34_out_gen: FOR t_09 IN 0 TO 9 GENERATE
    MMul_add_34_out(t_09) <= MMul_add_23_out(t_09) + selector_out_7(t_09);
  END GENERATE MMul_add_34_out_gen;



  selector_out_8_gen: FOR t_010 IN 0 TO 9 GENERATE
    selector_out_8(t_010) <= reshape_out(5, t_010);
  END GENERATE selector_out_8_gen;



  MMul_add_45_out_gen: FOR t_011 IN 0 TO 9 GENERATE
    MMul_add_45_out(t_011) <= MMul_add_34_out(t_011) + selector_out_8(t_011);
  END GENERATE MMul_add_45_out_gen;



  selector_out_9_gen: FOR t_012 IN 0 TO 9 GENERATE
    selector_out_9(t_012) <= reshape_out(6, t_012);
  END GENERATE selector_out_9_gen;



  MMul_add_56_out_gen: FOR t_013 IN 0 TO 9 GENERATE
    MMul_add_56_out(t_013) <= MMul_add_45_out(t_013) + selector_out_9(t_013);
  END GENERATE MMul_add_56_out_gen;



  selector_out_10_gen: FOR t_014 IN 0 TO 9 GENERATE
    selector_out_10(t_014) <= reshape_out(7, t_014);
  END GENERATE selector_out_10_gen;



  MMul_add_67_out_gen: FOR t_015 IN 0 TO 9 GENERATE
    MMul_add_67_out(t_015) <= MMul_add_56_out(t_015) + selector_out_10(t_015);
  END GENERATE MMul_add_67_out_gen;



  selector_out_11_gen: FOR t_016 IN 0 TO 9 GENERATE
    selector_out_11(t_016) <= reshape_out(8, t_016);
  END GENERATE selector_out_11_gen;



  MMul_add_78_out_gen: FOR t_017 IN 0 TO 9 GENERATE
    MMul_add_78_out(t_017) <= MMul_add_67_out(t_017) + selector_out_11(t_017);
  END GENERATE MMul_add_78_out_gen;



  selector_out_12_gen: FOR t_018 IN 0 TO 9 GENERATE
    selector_out_12(t_018) <= reshape_out(9, t_018);
  END GENERATE selector_out_12_gen;



  MMul_add_89_out_gen: FOR t_019 IN 0 TO 9 GENERATE
    MMul_add_89_out(t_019) <= MMul_add_78_out(t_019) + selector_out_12(t_019);
  END GENERATE MMul_add_89_out_gen;



  selector_out_13_gen: FOR t_020 IN 0 TO 9 GENERATE
    selector_out_13(t_020) <= reshape_out(10, t_020);
  END GENERATE selector_out_13_gen;



  s_3_gen: FOR t_021 IN 0 TO 9 GENERATE
    s_3(t_021) <= MMul_add_89_out(t_021) + selector_out_13(t_021);
  END GENERATE s_3_gen;


  Matrix_Multiply_out1_gen: FOR d0 IN 0 TO 9 GENERATE
    Matrix_Multiply_out1(d0) <= s_3(d0);
  END GENERATE;

  outputgen: FOR k IN 0 TO 9 GENERATE
    Matrix_Multiply_out1_1(k) <= std_logic_vector(Matrix_Multiply_out1(k));
  END GENERATE;

  Out1 <= sig_out1;

END rtl;

